public class cx.hell.android.lib.pdf.PDF extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static android.content.Context applicationContext;
    private static java.util.Map fontNameToFile;
    private android.os.ParcelFileDescriptor fileDescriptor;
    private int invalid_password;
    private int pdf_ptr;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Runtime $r1;
        long $l0;
        int $i1;
        byte $b2;

        <cx.hell.android.lib.pdf.PDF: java.lang.String TAG> = "cx.hell.android.pdfview";

        <cx.hell.android.lib.pdf.PDF: java.util.Map fontNameToFile> = null;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier", "NimbusMonL-Regu.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier-Bold", "NimbusMonL-Bold.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier-Oblique", "NimbusMonL-ReguObli.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier-BoldOblique", "NimbusMonL-BoldObli.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Helvetica", "NimbusSanL-Regu.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Helvetica-Bold", "NimbusSanL-Bold.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Helvetica-Oblique", "NimbusSanL-ReguItal.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Helvetica-BoldOblique", "NimbusSanL-BoldItal.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Times-Roman", "NimbusRomNo9L-Regu.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Times-Bold", "NimbusRomNo9L-Medi.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Times-Italic", "NimbusRomNo9L-ReguItal.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Times-BoldItalic", "NimbusRomNo9L-MediItal.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Symbol", "StandardSymL.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZapfDingbats", "Dingbats.cff");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("DroidSans", "droid/DroidSans.ttf");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("DroidSansMono", "droid/DroidSansMono.ttf");

        <cx.hell.android.lib.pdf.PDF: java.util.Map fontNameToFile> = $r0;

        <cx.hell.android.lib.pdf.PDF: android.content.Context applicationContext> = null;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("apv");

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l0 = virtualinvoke $r1.<java.lang.Runtime: long maxMemory()>();

        $i1 = 0;

        $b2 = $l0 cmp 1073741824L;

        if $b2 >= 0 goto label1;

        $l0 = $l0 / 2L;

        $i1 = (int) $l0;

     label1:
        staticinvoke <cx.hell.android.lib.pdf.PDF: void init(int)>($i1);

        return;
    }

    public void <init>(android.os.ParcelFileDescriptor, int)
    {
        cx.hell.android.lib.pdf.PDF $r0;
        android.os.ParcelFileDescriptor $r1;
        int $i0;
        java.io.FileDescriptor $r2;

        $r0 := @this: cx.hell.android.lib.pdf.PDF;

        $r1 := @parameter0: android.os.ParcelFileDescriptor;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<cx.hell.android.lib.pdf.PDF: int pdf_ptr> = -1;

        $r0.<cx.hell.android.lib.pdf.PDF: int invalid_password> = 0;

        $r0.<cx.hell.android.lib.pdf.PDF: android.os.ParcelFileDescriptor fileDescriptor> = null;

        $r0.<cx.hell.android.lib.pdf.PDF: android.os.ParcelFileDescriptor fileDescriptor> = $r1;

        $r2 = virtualinvoke $r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r0.<cx.hell.android.lib.pdf.PDF: int parseFileDescriptor(java.io.FileDescriptor,int,java.lang.String)>($r2, $i0, "");

        return;
    }

    public void <init>(java.io.File, int)
    {
        cx.hell.android.lib.pdf.PDF $r0;
        java.io.File $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: cx.hell.android.lib.pdf.PDF;

        $r1 := @parameter0: java.io.File;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<cx.hell.android.lib.pdf.PDF: int pdf_ptr> = -1;

        $r0.<cx.hell.android.lib.pdf.PDF: int invalid_password> = 0;

        $r0.<cx.hell.android.lib.pdf.PDF: android.os.ParcelFileDescriptor fileDescriptor> = null;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r0.<cx.hell.android.lib.pdf.PDF: int parseFile(java.lang.String,int,java.lang.String)>($r2, $i0, "");

        return;
    }

    public static byte[] getAssetBytes(java.lang.String)
    {
        java.lang.String $r0;
        java.io.ByteArrayOutputStream $r1;
        java.io.IOException $r2;
        byte[] $r3;
        android.content.Context $r4;
        java.lang.RuntimeException $r5;
        android.content.res.AssetManager $r6;
        java.io.InputStream $r7;
        int $i0;
        java.lang.StringBuilder $r8;

        $r0 := @parameter0: java.lang.String;

        $r4 = <cx.hell.android.lib.pdf.PDF: android.content.Context applicationContext>;

        if $r4 != null goto label01;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("PDF needs application context to load font and cmap files");

        throw $r5;

     label01:
        $r4 = <cx.hell.android.lib.pdf.PDF: android.content.Context applicationContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.res.AssetManager getAssets()>();

     label02:
        $r7 = virtualinvoke $r6.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>($r0, 3);

     label03:
        $r1 = new java.io.ByteArrayOutputStream;

     label04:
        $i0 = virtualinvoke $r7.<java.io.InputStream: int available()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1024);

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label05:
        $r3 = newarray (byte)[262144];

     label06:
        $i0 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>($r3);

     label07:
        if $i0 != -1 goto label10;

     label08:
        $r3 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label09:
        return $r3;

     label10:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label11:
        goto label06;

     label12:
        $r2 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("failed to read asset \"");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r0);

        return null;

        catch java.io.IOException from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label12;
    }

    public static byte[] getCmapData(java.lang.String)
    {
        java.lang.String $r0, $r2;
        java.lang.StringBuilder $r1;
        byte[] $r3;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("cmap/");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = staticinvoke <cx.hell.android.lib.pdf.PDF: byte[] getAssetBytes(java.lang.String)>($r2);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("loaded cmap ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (size: ");

        $i0 = lengthof $r3;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r0);

        return $r3;
    }

    public static byte[] getDroidSansFallbackData()
    {
        java.io.ByteArrayOutputStream $r0;
        java.io.IOException $r1;
        java.io.FileInputStream $r2;
        byte[] $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r2 = new java.io.FileInputStream;

     label01:
        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.lang.String)>("/system/fonts/DroidSansFallback.ttf");

     label02:
        $r0 = new java.io.ByteArrayOutputStream;

     label03:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int available()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 1024);

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>($i0);

     label04:
        $r3 = newarray (byte)[262144];

     label05:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r3);

     label06:
        if $i0 != -1 goto label13;

     label07:
        $r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label08:
        $r4 = new java.lang.StringBuilder;

     label09:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("loaded ");

     label10:
        $i0 = lengthof $r3;

     label11:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes for DroidSansFallback.ttf");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r5);

     label12:
        return $r3;

     label13:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

     label14:
        goto label05;

     label15:
        $r1 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("got exception while trying to load DroidSansFallback.ttf: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r5);

        return null;

        catch java.io.IOException from label01 to label02 with label15;
        catch java.io.IOException from label03 to label04 with label15;
        catch java.io.IOException from label05 to label06 with label15;
        catch java.io.IOException from label07 to label08 with label15;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public static byte[] getFontData(java.lang.String)
    {
        java.lang.String $r0, $r5;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        byte[] $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name can\'t be null");

        throw $r1;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name can\'t be empty");

        throw $r1;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("DroidSansFallback");

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <cx.hell.android.lib.pdf.PDF: byte[] getDroidSansFallbackData()>();

        return $r2;

     label3:
        $r3 = <cx.hell.android.lib.pdf.PDF: java.util.Map fontNameToFile>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r0);

        if $z0 == 0 goto label5;

        $r3 = <cx.hell.android.lib.pdf.PDF: java.util.Map fontNameToFile>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.lang.String) $r4;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("trying to load font data ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("font/");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <cx.hell.android.lib.pdf.PDF: byte[] getAssetBytes(java.lang.String)>($r0);

        return $r2;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("font name \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found in file name mapping");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("cx.hell.android.pdfview", $r5);

        $r5 = $r0;

        goto label4;
    }

    public static native void init(int);

    private synchronized native int parseFile(java.lang.String, int, java.lang.String);

    private synchronized native int parseFileDescriptor(java.io.FileDescriptor, int, java.lang.String);

    public static void setApplicationContext(android.content.Context)
    {
        android.content.Context $r0;

        $r0 := @parameter0: android.content.Context;

        <cx.hell.android.lib.pdf.PDF: android.content.Context applicationContext> = $r0;

        return;
    }

    public synchronized native void clearFindResult();

    public void finalize()
    {
        cx.hell.android.lib.pdf.PDF $r0;
        java.lang.Throwable $r1;

        $r0 := @this: cx.hell.android.lib.pdf.PDF;

     label1:
        specialinvoke $r0.<java.lang.Object: void finalize()>();

     label2:
        virtualinvoke $r0.<cx.hell.android.lib.pdf.PDF: void freeMemory()>();

        return;

     label3:
        $r1 := @caughtexception;

        goto label2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public synchronized native java.util.List find(java.lang.String, int, int);

    public synchronized native void freeMemory();

    public native int getHeapSize();

    public synchronized native int getPageCount();

    public synchronized native int getPageSize(int, cx.hell.android.lib.pdf.PDF$Size);

    public boolean isInvalidPassword()
    {
        cx.hell.android.lib.pdf.PDF $r0;
        int $i0;

        $r0 := @this: cx.hell.android.lib.pdf.PDF;

        $i0 = $r0.<cx.hell.android.lib.pdf.PDF: int invalid_password>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isValid()
    {
        cx.hell.android.lib.pdf.PDF $r0;
        int $i0;

        $r0 := @this: cx.hell.android.lib.pdf.PDF;

        $i0 = $r0.<cx.hell.android.lib.pdf.PDF: int pdf_ptr>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public synchronized native int[] renderPage(int, int, int, int, int, boolean, cx.hell.android.lib.pdf.PDF$Size);
}
